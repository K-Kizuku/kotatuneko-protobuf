// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: game/game.proto

package game

import (
	context "context"
	rpc "github.com/K-Kizuku/kotatuneko-protobuf/gen/game/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GameService_GameStatusStream_FullMethodName = "/game.GameService/GameStatusStream"
	GameService_PhysicsStream_FullMethodName    = "/game.GameService/PhysicsStream"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	GameStatusStream(ctx context.Context, in *rpc.GameStatusRequest, opts ...grpc.CallOption) (*rpc.GameStatusResponse, error)
	PhysicsStream(ctx context.Context, in *rpc.PhysicsRequest, opts ...grpc.CallOption) (*rpc.PhysicsResponse, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) GameStatusStream(ctx context.Context, in *rpc.GameStatusRequest, opts ...grpc.CallOption) (*rpc.GameStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rpc.GameStatusResponse)
	err := c.cc.Invoke(ctx, GameService_GameStatusStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) PhysicsStream(ctx context.Context, in *rpc.PhysicsRequest, opts ...grpc.CallOption) (*rpc.PhysicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rpc.PhysicsResponse)
	err := c.cc.Invoke(ctx, GameService_PhysicsStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	GameStatusStream(context.Context, *rpc.GameStatusRequest) (*rpc.GameStatusResponse, error)
	PhysicsStream(context.Context, *rpc.PhysicsRequest) (*rpc.PhysicsResponse, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) GameStatusStream(context.Context, *rpc.GameStatusRequest) (*rpc.GameStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameStatusStream not implemented")
}
func (UnimplementedGameServiceServer) PhysicsStream(context.Context, *rpc.PhysicsRequest) (*rpc.PhysicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhysicsStream not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_GameStatusStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.GameStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GameStatusStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GameStatusStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GameStatusStream(ctx, req.(*rpc.GameStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_PhysicsStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.PhysicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).PhysicsStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_PhysicsStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).PhysicsStream(ctx, req.(*rpc.PhysicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GameStatusStream",
			Handler:    _GameService_GameStatusStream_Handler,
		},
		{
			MethodName: "PhysicsStream",
			Handler:    _GameService_PhysicsStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/game.proto",
}
