// @generated by protoc-gen-es v1.10.0
// @generated from file game/resources/game.proto (package game.resources, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum game.resources.GameState
 */
export declare enum GameState {
  /**
   * @generated from enum value: GAME_STATE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: GAME_STATE_WAIT = 1;
   */
  WAIT = 1,

  /**
   * @generated from enum value: GAME_STATE_PLAY = 2;
   */
  PLAY = 2,

  /**
   * @generated from enum value: GAME_STATE_EXIT = 3;
   */
  EXIT = 3,

  /**
   * @generated from enum value: GAME_STATE_FINISH = 4;
   */
  FINISH = 4,

  /**
   * @generated from enum value: GAME_STATE_RESULT = 5;
   */
  RESULT = 5,
}

/**
 * @generated from enum game.resources.HandState
 */
export declare enum HandState {
  /**
   * @generated from enum value: HAND_STATE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: HAND_STATE_HOLDING = 1;
   */
  HOLDING = 1,

  /**
   * @generated from enum value: HAND_STATE_OPENING = 2;
   */
  OPENING = 2,
}

/**
 * @generated from enum game.resources.ObjectState
 */
export declare enum ObjectState {
  /**
   * @generated from enum value: OBJECT_STATE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: OBJECT_STATE_STAYING = 1;
   */
  STAYING = 1,

  /**
   * @generated from enum value: OBJECT_STATE_MOVING = 2;
   */
  MOVING = 2,

  /**
   * @generated from enum value: OBJECT_STATE_FORCING = 3;
   */
  FORCING = 3,
}

/**
 * @generated from enum game.resources.ObjectKind
 */
export declare enum ObjectKind {
  /**
   * @generated from enum value: OBJECT_KIND_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: OBJECT_KIND_RECTANGULAR = 1;
   */
  RECTANGULAR = 1,
}

/**
 * @generated from message game.resources.Vector3
 */
export declare class Vector3 extends Message<Vector3> {
  /**
   * @generated from field: double x = 1;
   */
  x: number;

  /**
   * @generated from field: double y = 2;
   */
  y: number;

  /**
   * @generated from field: double z = 3;
   */
  z: number;

  constructor(data?: PartialMessage<Vector3>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "game.resources.Vector3";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vector3;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vector3;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vector3;

  static equals(a: Vector3 | PlainMessage<Vector3> | undefined, b: Vector3 | PlainMessage<Vector3> | undefined): boolean;
}

/**
 * @generated from message game.resources.Player
 */
export declare class Player extends Message<Player> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string color = 3;
   */
  color: string;

  constructor(data?: PartialMessage<Player>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "game.resources.Player";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Player;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Player;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Player;

  static equals(a: Player | PlainMessage<Player> | undefined, b: Player | PlainMessage<Player> | undefined): boolean;
}

/**
 * @generated from message game.resources.Object
 */
export declare class Object$ extends Message<Object$> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId: string;

  /**
   * @generated from field: int32 layer = 2;
   */
  layer: number;

  /**
   * @generated from field: game.resources.ObjectKind kinds = 3;
   */
  kinds: ObjectKind;

  /**
   * @generated from field: game.resources.ObjectState state = 4;
   */
  state: ObjectState;

  /**
   * @generated from field: game.resources.Vector3 position = 5;
   */
  position?: Vector3;

  /**
   * @generated from field: game.resources.Vector3 size = 6;
   */
  size?: Vector3;

  constructor(data?: PartialMessage<Object$>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "game.resources.Object";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object$;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object$;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object$;

  static equals(a: Object$ | PlainMessage<Object$> | undefined, b: Object$ | PlainMessage<Object$> | undefined): boolean;
}

/**
 * @generated from message game.resources.Stat
 */
export declare class Stat extends Message<Stat> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId: string;

  /**
   * @generated from field: int32 score = 2;
   */
  score: number;

  /**
   * @generated from field: int32 rank = 3;
   */
  rank: number;

  /**
   * @generated from field: int32 rank_score = 4;
   */
  rankScore: number;

  /**
   * @generated from field: int32 rank_score_diff = 5;
   */
  rankScoreDiff: number;

  /**
   * @generated from field: int32 rank_score_diff_rate = 6;
   */
  rankScoreDiffRate: number;

  /**
   * @generated from field: int32 rank_score_diff_rate_rank = 7;
   */
  rankScoreDiffRateRank: number;

  constructor(data?: PartialMessage<Stat>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "game.resources.Stat";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Stat;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Stat;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Stat;

  static equals(a: Stat | PlainMessage<Stat> | undefined, b: Stat | PlainMessage<Stat> | undefined): boolean;
}

/**
 * @generated from message game.resources.Hand
 */
export declare class Hand extends Message<Hand> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: game.resources.HandState state = 2;
   */
  state: HandState;

  /**
   * @generated from field: game.resources.Vector3 center_position = 3;
   */
  centerPosition?: Vector3;

  /**
   * @generated from field: game.resources.Vector3 action_position = 4;
   */
  actionPosition?: Vector3;

  constructor(data?: PartialMessage<Hand>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "game.resources.Hand";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Hand;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Hand;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Hand;

  static equals(a: Hand | PlainMessage<Hand> | undefined, b: Hand | PlainMessage<Hand> | undefined): boolean;
}

